
//Question 1

const express = require('express');
const axios = require('axios');

const app = express();

app.get('/top-posts', async (req, res) => {
  try {
    // Fetch comments and all posts data
    const [commentsResponse, postsResponse] = await Promise.all([
      axios.get('https://jsonplaceholder.typicode.com/comments'),
      axios.get('https://jsonplaceholder.typicode.com/posts')
    ]);

    const comments = commentsResponse.data;
    const posts = postsResponse.data;

    // Create dictionary with post_id as key and total number of comments as value
    const postComments = {};
    comments.forEach(comment => {
      if (postComments[comment.postId]) {
        postComments[comment.postId]++;
      } else {
        postComments[comment.postId] = 1;
      }
    });

    // Sort dictionary by number of comments in descending order
    const sortedPostComments = Object.entries(postComments).sort((a, b) => b[1] - a[1]);

    // Create list of top posts
    const topPosts = [];
    for (const [postId, commentCount] of sortedPostComments) {
      const postResponse = await axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);
      const post = postResponse.data;
      topPosts.push({
        post_id: postId,
        post_title: post.title,
        post_body: post.body,
        total_number_of_comments: commentCount
      });
    }

    res.json(topPosts);
  } catch (err) {
    res.status(500).json({ message: 'Error fetching data' });
  }
});

app.get('/filter-comments', async (req, res) => {
  try {
    // Fetch comments data
    const commentsResponse = await axios.get('https://jsonplaceholder.typicode.com/comments');
    const comments = commentsResponse.data;

    // Filter comments based on query parameters
    const filteredComments = comments.filter(comment => {
      if (req.query.postId && comment.postId !== Number(req.query.postId)) {
        return false;
      }
      if (req.query.name && comment.name !== req.query.name) {
        return false;
      }
      if (req.query.email && comment.email !== req.query.email) {
        return false;
      }
      return true;
    });

    res.json(filteredComments);
  } catch (err) {
    res.status(500).json({ message: 'Error fetching data' });
  }
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
